input AccountCreateInput {
  access_token: String = null
  expires_at: Int = null
  id_token: String = null
  provider: String = null
  providerAccountId: String = null
  refresh_token: String = null
  scope: String = null
  session_state: String = null
  token_type: String = null
  type: String!
  userId: UUID!
}

type AccountType {
  access_token: String
  expires_at: Int
  id: UUID!
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: UUID!
}

type BuiltinClassType {
  name: String!
}

union BuiltinClassTypeMakutuClassType = BuiltinClassType | MakutuClassType

"""Date with time (isoformat)"""
scalar DateTime

type GeosQuery {
  geosXsd: String!
  numXmlComplexTypes: Int!
  numXmlSimpleTypes: Int!
  xmlComplexTypes(names: [String!] = null): [XMLComplexType!]!
  xmlSchema: XMLSchema!
  xmlSimpleTypes(names: [String!] = null): [XMLSimpleType!]!
}

type GraphType {
  author: UserType!
  authorId: UUID!
  data: String!
  description: String
  id: UUID!
  isPublic: Boolean!
  name: String!
}

type MakutuClassType {
  extends: [String!]!
  getters: [MethodType!]!
  members: [ParameterType!]!
  methods: [MethodType!]!
  name: String!
  parentClass: BuiltinClassTypeMakutuClassType!
}

type MethodType {
  name: String!
  parameters: [ParameterType!]!
  returnType: String
}

type Mutation {
  createAccount(account: AccountCreateInput!): AccountType!
  createSession(session: SessionCreateInput!): SessionType!
  createUser(user: UserCreateInput!): UserType!
  deleteSession(sessionToken: String!): Boolean!
  updateSession(session: SessionCreateInput!): SessionType!
}

type ParameterType {
  name: String!
  type: String
}

input ProviderInput {
  provider: String!
  providerAccountId: String!
}

type Query {
  geos: GeosQuery!
  graph(id: Int!): GraphType!
  graphs: [GraphType!]!
  makutuClass(name: String!): MakutuClassType!
  makutuClasses: [MakutuClassType!]!
  session(sessionToken: String!): SessionType!
  user(email: String = null, id: UUID = null, provider: ProviderInput = null): UserType!
  users: [UserType!]!
}

input SessionCreateInput {
  expires: DateTime = null
  sessionToken: UUID = null
  userId: UUID = null
}

type SessionType {
  expires: DateTime
  id: UUID!
  sessionToken: UUID
  user: UserType!
  userId: UUID
}

scalar UUID

input UserCreateInput {
  email: String = null
  emailVerified: DateTime = null
  image: String = null
  name: String = null
}

type UserType {
  email: String
  emailVerified: DateTime
  graphs: [GraphType!]!
  id: UUID!
  image: String
  name: String
}

type XMLAttribute {
  default: String
  name: String!
  pattern: String
  required: Boolean!
  type: String!
}

union XMLAttributeXMLComplexType = XMLAttribute | XMLComplexType

type XMLComplexType {
  attributes: [XMLAttribute!]!
  childTypes: [String!]!
  name: String!
  properties: [XMLAttributeXMLComplexType!]!
}

type XMLSchema {
  complexTypes: [XMLComplexType!]!
  simpleTypes: [XMLSimpleType!]!
}

type XMLSimpleType {
  name: String!
  pattern: String!
}
